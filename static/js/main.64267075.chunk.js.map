{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","images","props","currentImage","transition","forward","moveTransitionEnd","newImages","current","step","length","slice","setState","handleMoveForward","infinite","lastImageIndex","Math","min","handleMoveBackward","max","frameSize","different","prevProps","this","propsImages","itemWidth","animationDuration","className","style","maxWidth","width","transform","transitionDuration","onTransitionEnd","map","image","index","src","alt","type","disabled","onClick","Component","imagesArray","App","window","matchMedia","matches","floor","innerWidth","onresize","htmlFor","id","name","value","onChange","target","Number","checked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64267075.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\n\ninterface State {\n  images: string[],\n  currentImage: number,\n  forward: boolean,\n  transition: boolean,\n}\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    images: this.props.images,\n    currentImage: 0,\n    transition: true,\n    forward: false,\n  };\n\n  componentDidUpdate(prevProps: Readonly<Props>) {\n    const { images, currentImage } = this.state;\n    const { step, images: propsImages, infinite } = this.props;\n    const { length } = images;\n\n    if (\n      infinite\n      && infinite !== prevProps.infinite\n      && currentImage + step >= this.lastImageIndex()\n    ) {\n      this.setState({\n        images: [...images, ...images.slice(0, step)].slice(-length),\n        currentImage: currentImage - step,\n        transition: false,\n      });\n    } else if (\n      infinite\n      && infinite !== prevProps.infinite\n    ) {\n      this.setState({\n        images: [...images.slice(length - step), ...images].slice(0, length),\n        currentImage: currentImage + step,\n        transition: false,\n      });\n    } else if (infinite !== prevProps.infinite) {\n      this.setState({\n        images: propsImages,\n        currentImage: 0,\n        transition: false,\n      });\n    }\n  }\n\n  moveTransitionEnd = () => {\n    const { images, currentImage, forward } = this.state;\n    const { step } = this.props;\n    const { length } = images;\n\n    let newImages: string[];\n    let current: number;\n\n    if (forward) {\n      newImages = [...images, ...images.slice(0, step)].slice(-length);\n      current = currentImage - step;\n    } else {\n      newImages = [...images.slice(length - step), ...images].slice(0, length);\n      current = currentImage + step;\n    }\n\n    this.setState({\n      images: newImages,\n      currentImage: current,\n      transition: false,\n    });\n  };\n\n  handleMoveForward = () => {\n    const { currentImage } = this.state;\n    const { step, infinite } = this.props;\n    const current = currentImage + step;\n\n    if (infinite && current > this.lastImageIndex()) {\n      return;\n    }\n\n    this.setState({\n      currentImage: Math.min(current, this.lastImageIndex()),\n      transition: true,\n      forward: true,\n    });\n  };\n\n  handleMoveBackward = () => {\n    const { currentImage } = this.state;\n    const { step, infinite } = this.props;\n    const current = currentImage - step;\n\n    if (infinite && current < 0) {\n      return;\n    }\n\n    this.setState({\n      currentImage: Math.max(current, 0),\n      transition: true,\n      forward: false,\n    });\n  };\n\n  lastImageIndex = () => {\n    const { step, frameSize } = this.props;\n    const { images } = this.state;\n    const different = Math.min(step, frameSize);\n\n    return images.length - different;\n  };\n\n  render() {\n    const {\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const {\n      images,\n      currentImage,\n      transition,\n    } = this.state;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ maxWidth: `${frameSize * itemWidth}px` }}\n      >\n        <div\n          className=\"Carousel__container\"\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              width: `${images.length * itemWidth}px`,\n              transform: `translateX(${-(currentImage * itemWidth)}px)`,\n              transitionDuration: `${transition ? animationDuration : 0}ms`,\n            }}\n            onTransitionEnd={() => {\n              if (infinite) {\n                this.moveTransitionEnd();\n              }\n            }}\n          >\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={`${index}`}\n                  style={{\n                    width: `${itemWidth}px`,\n                  }}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"Carousel__navigation\">\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            disabled={!infinite && currentImage <= 0}\n            onClick={this.handleMoveBackward}\n          >\n            <FaChevronLeft />\n          </button>\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            data-cy=\"next\"\n            disabled={!infinite && currentImage >= this.lastImageIndex()}\n            onClick={this.handleMoveForward}\n          >\n            <FaChevronRight />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './carouselSetup.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst imagesArray = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: imagesArray,\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  componentDidMount() {\n    const { itemWidth } = this.state;\n\n    if (window.matchMedia('(max-width: 600px)').matches) {\n      this.setState({\n        frameSize: Math.floor(window.innerWidth / itemWidth) - 1,\n      });\n    }\n  }\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    window.onresize = () => {\n      if (window.matchMedia('(max-width: 600px)').matches) {\n        this.setState({\n          frameSize: Math.floor(window.innerWidth / itemWidth) - 1,\n        });\n      }\n    };\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">\n          Carousel with\n          <br />\n          {`${images.length} images`}\n        </h1>\n\n        <Carousel {...this.state} />\n\n        <form className=\"carouselSetup\">\n          <div className=\"carouselSetup__field\">\n            <label htmlFor=\"step\">Step:</label>\n            <input\n              type=\"number\"\n              id=\"step\"\n              name=\"Step\"\n              min=\"1\"\n              max={images.length}\n              value={step}\n              onChange={({ target }) => {\n                this.setState({ step: Number(target.value) });\n              }}\n            />\n          </div>\n          <div className=\"carouselSetup__field\">\n            <label htmlFor=\"frameSize\">Frame Size:</label>\n            <input\n              type=\"number\"\n              id=\"frameSize\"\n              name=\"Frame Size\"\n              min=\"1\"\n              max={images.length}\n              value={frameSize}\n              onChange={({ target }) => {\n                this.setState({ frameSize: Number(target.value) });\n              }}\n            />\n          </div>\n          <div className=\"carouselSetup__field\">\n            <label htmlFor=\"itemWidth\">Item Width:</label>\n            <input\n              type=\"number\"\n              id=\"itemWidth\"\n              name=\"Item Width\"\n              min=\"0\"\n              value={itemWidth}\n              onChange={({ target }) => {\n                this.setState({ itemWidth: Number(target.value) });\n              }}\n            />\n          </div>\n          <div className=\"carouselSetup__field\">\n            <label htmlFor=\"animationDuration\">Animation Duration:</label>\n            <input\n              type=\"number\"\n              id=\"animationDuration\"\n              name=\"Animation Duration\"\n              min=\"0\"\n              value={animationDuration}\n              onChange={({ target }) => {\n                this.setState({ animationDuration: Number(target.value) });\n              }}\n            />\n          </div>\n          <div className=\"carouselSetup__field carouselSetup__field--checkbox\">\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              name=\"Infinite\"\n              checked={infinite}\n              onChange={({ target }) => {\n                this.setState({ infinite: target.checked });\n              }}\n            />\n            <label htmlFor=\"infinite\">Infinite:</label>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}